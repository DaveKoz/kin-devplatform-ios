// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static open func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }

        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }
    
    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for [Coupon]
        Decoders.addDecoder(clazz: [Coupon].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Coupon]> in
            return Decoders.decode(clazz: [Coupon].self, source: source)
        }

        // Decoder for Coupon
        Decoders.addDecoder(clazz: Coupon.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Coupon> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Coupon() : instance as! Coupon
                switch Decoders.decodeOptional(clazz: Coupon.ContentType.self, source: sourceDictionary["content_type"] as AnyObject?) {
                
                case let .success(value): _result.contentType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Coupon", actual: "\(source)"))
            }
        }
        // Decoder for [EarnResult]
        Decoders.addDecoder(clazz: [EarnResult].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[EarnResult]> in
            return Decoders.decode(clazz: [EarnResult].self, source: source)
        }

        // Decoder for EarnResult
        Decoders.addDecoder(clazz: EarnResult.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<EarnResult> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? EarnResult() : instance as! EarnResult
                switch Decoders.decodeOptional(clazz: EarnResult.OfferType.self, source: sourceDictionary["offer_type"] as AnyObject?) {
                
                case let .success(value): _result.offerType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"] as AnyObject?) {
                
                case let .success(value): _result.transactionId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sender_address"] as AnyObject?) {
                
                case let .success(value): _result.senderAddress = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "EarnResult", actual: "\(source)"))
            }
        }
        // Decoder for [EarnSubmission]
        Decoders.addDecoder(clazz: [EarnSubmission].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[EarnSubmission]> in
            return Decoders.decode(clazz: [EarnSubmission].self, source: source)
        }

        // Decoder for EarnSubmission
        Decoders.addDecoder(clazz: EarnSubmission.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<EarnSubmission> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? EarnSubmission() : instance as! EarnSubmission
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recipient_address"] as AnyObject?) {
                
                case let .success(value): _result.recipientAddress = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["completed_form"] as AnyObject?) {
                
                case let .success(value): _result.completedForm = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "EarnSubmission", actual: "\(source)"))
            }
        }
        // Decoder for [Limits]
        Decoders.addDecoder(clazz: [Limits].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Limits]> in
            return Decoders.decode(clazz: [Limits].self, source: source)
        }

        // Decoder for Limits
        Decoders.addDecoder(clazz: Limits.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Limits> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Limits() : instance as! Limits
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["supply"] as AnyObject?) {
                
                case let .success(value): _result.supply = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expiration"] as AnyObject?) {
                
                case let .success(value): _result.expiration = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Limits", actual: "\(source)"))
            }
        }
        // Decoder for [ModelError]
        Decoders.addDecoder(clazz: [ModelError].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ModelError]> in
            return Decoders.decode(clazz: [ModelError].self, source: source)
        }

        // Decoder for ModelError
        Decoders.addDecoder(clazz: ModelError.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ModelError> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ModelError() : instance as! ModelError
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"] as AnyObject?) {
                
                case let .success(value): _result.error = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?) {
                
                case let .success(value): _result.message = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?) {
                
                case let .success(value): _result.code = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ModelError", actual: "\(source)"))
            }
        }
        // Decoder for [MultiChoicePoll]
        Decoders.addDecoder(clazz: [MultiChoicePoll].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MultiChoicePoll]> in
            return Decoders.decode(clazz: [MultiChoicePoll].self, source: source)
        }

        // Decoder for MultiChoicePoll
        Decoders.addDecoder(clazz: MultiChoicePoll.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MultiChoicePoll> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MultiChoicePoll() : instance as! MultiChoicePoll
                switch Decoders.decodeOptional(clazz: MultiChoicePoll.ContentType.self, source: sourceDictionary["content_type"] as AnyObject?) {
                
                case let .success(value): _result.contentType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [Question].self, source: sourceDictionary["questions"] as AnyObject?) {
                
                case let .success(value): _result.questions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MultiChoicePoll", actual: "\(source)"))
            }
        }
        // Decoder for [MultiChoicePollAnswer]
        Decoders.addDecoder(clazz: [MultiChoicePollAnswer].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MultiChoicePollAnswer]> in
            return Decoders.decode(clazz: [MultiChoicePollAnswer].self, source: source)
        }

        // Decoder for MultiChoicePollAnswer
        Decoders.addDecoder(clazz: MultiChoicePollAnswer.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MultiChoicePollAnswer> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MultiChoicePollAnswer() : instance as! MultiChoicePollAnswer
                switch Decoders.decodeOptional(clazz: MultiChoicePollAnswer.ContentType.self, source: sourceDictionary["content_type"] as AnyObject?) {
                
                case let .success(value): _result.contentType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [Int32].self, source: sourceDictionary["answers"] as AnyObject?) {
                
                case let .success(value): _result.answers = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MultiChoicePollAnswer", actual: "\(source)"))
            }
        }
        // Decoder for [Offer]
        Decoders.addDecoder(clazz: [Offer].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Offer]> in
            return Decoders.decode(clazz: [Offer].self, source: source)
        }

        // Decoder for Offer
        Decoders.addDecoder(clazz: Offer.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Offer> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Offer() : instance as! Offer
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): _result.description = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["image"] as AnyObject?) {
                
                case let .success(value): _result.image = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Limits.self, source: sourceDictionary["limits"] as AnyObject?) {
                
                case let .success(value): _result.limits = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["amount"] as AnyObject?) {
                
                case let .success(value): _result.amount = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["content"] as AnyObject?) {
                
                case let .success(value): _result.content = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Offer.OfferType.self, source: sourceDictionary["offer_type"] as AnyObject?) {
                
                case let .success(value): _result.offerType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Offer", actual: "\(source)"))
            }
        }
        // Decoder for [OfferList]
        Decoders.addDecoder(clazz: [OfferList].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[OfferList]> in
            return Decoders.decode(clazz: [OfferList].self, source: source)
        }

        // Decoder for OfferList
        Decoders.addDecoder(clazz: OfferList.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<OfferList> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? OfferList() : instance as! OfferList
                switch Decoders.decodeOptional(clazz: [Offer].self, source: sourceDictionary["offers"] as AnyObject?) {
                
                case let .success(value): _result.offers = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "OfferList", actual: "\(source)"))
            }
        }
        // Decoder for [Order]
        Decoders.addDecoder(clazz: [Order].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Order]> in
            return Decoders.decode(clazz: [Order].self, source: source)
        }

        // Decoder for Order
        Decoders.addDecoder(clazz: Order.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Order> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Order() : instance as! Order
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): _result.id = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recipient_address"] as AnyObject?) {
                
                case let .success(value): _result.recipientAddress = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Order", actual: "\(source)"))
            }
        }
        // Decoder for [Question]
        Decoders.addDecoder(clazz: [Question].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Question]> in
            return Decoders.decode(clazz: [Question].self, source: source)
        }

        // Decoder for Question
        Decoders.addDecoder(clazz: Question.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Question> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Question() : instance as! Question
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): _result.title = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["answers"] as AnyObject?) {
                
                case let .success(value): _result.answers = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Question", actual: "\(source)"))
            }
        }
        // Decoder for [SliderPoll]
        Decoders.addDecoder(clazz: [SliderPoll].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SliderPoll]> in
            return Decoders.decode(clazz: [SliderPoll].self, source: source)
        }

        // Decoder for SliderPoll
        Decoders.addDecoder(clazz: SliderPoll.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SliderPoll> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SliderPoll() : instance as! SliderPoll
                switch Decoders.decodeOptional(clazz: SliderPoll.ContentType.self, source: sourceDictionary["content_type"] as AnyObject?) {
                
                case let .success(value): _result.contentType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min"] as AnyObject?) {
                
                case let .success(value): _result.min = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max"] as AnyObject?) {
                
                case let .success(value): _result.max = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SliderPoll", actual: "\(source)"))
            }
        }
        // Decoder for [SliderPollAnswer]
        Decoders.addDecoder(clazz: [SliderPollAnswer].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SliderPollAnswer]> in
            return Decoders.decode(clazz: [SliderPollAnswer].self, source: source)
        }

        // Decoder for SliderPollAnswer
        Decoders.addDecoder(clazz: SliderPollAnswer.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SliderPollAnswer> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SliderPollAnswer() : instance as! SliderPollAnswer
                switch Decoders.decodeOptional(clazz: SliderPollAnswer.ContentType.self, source: sourceDictionary["content_type"] as AnyObject?) {
                
                case let .success(value): _result.contentType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?) {
                
                case let .success(value): _result.value = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SliderPollAnswer", actual: "\(source)"))
            }
        }
        // Decoder for [SpendResult]
        Decoders.addDecoder(clazz: [SpendResult].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SpendResult]> in
            return Decoders.decode(clazz: [SpendResult].self, source: source)
        }

        // Decoder for SpendResult
        Decoders.addDecoder(clazz: SpendResult.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SpendResult> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SpendResult() : instance as! SpendResult
                switch Decoders.decodeOptional(clazz: SpendResult.OfferType.self, source: sourceDictionary["offer_type"] as AnyObject?) {
                
                case let .success(value): _result.offerType = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SpendResultAsset.self, source: sourceDictionary["asset"] as AnyObject?) {
                
                case let .success(value): _result.asset = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SpendResult", actual: "\(source)"))
            }
        }
        // Decoder for [SpendResultAsset]
        Decoders.addDecoder(clazz: [SpendResultAsset].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SpendResultAsset]> in
            return Decoders.decode(clazz: [SpendResultAsset].self, source: source)
        }

        // Decoder for SpendResultAsset
        Decoders.addDecoder(clazz: SpendResultAsset.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SpendResultAsset> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SpendResultAsset() : instance as! SpendResultAsset
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["coupon_code"] as AnyObject?) {
                
                case let .success(value): _result.couponCode = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SpendResultAsset.AssetType.self, source: sourceDictionary["asset_type"] as AnyObject?) {
                
                case let .success(value): _result.assetType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SpendResultAsset", actual: "\(source)"))
            }
        }
        // Decoder for [SpendSubmission]
        Decoders.addDecoder(clazz: [SpendSubmission].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SpendSubmission]> in
            return Decoders.decode(clazz: [SpendSubmission].self, source: source)
        }

        // Decoder for SpendSubmission
        Decoders.addDecoder(clazz: SpendSubmission.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SpendSubmission> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SpendSubmission() : instance as! SpendSubmission
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"] as AnyObject?) {
                
                case let .success(value): _result.transactionId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sender_address"] as AnyObject?) {
                
                case let .success(value): _result.senderAddress = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SpendSubmission", actual: "\(source)"))
            }
        }
        // Decoder for [SubmissionResult]
        Decoders.addDecoder(clazz: [SubmissionResult].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SubmissionResult]> in
            return Decoders.decode(clazz: [SubmissionResult].self, source: source)
        }

        // Decoder for SubmissionResult
        Decoders.addDecoder(clazz: SubmissionResult.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SubmissionResult> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SubmissionResult() : instance as! SubmissionResult
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order_id"] as AnyObject?) {
                
                case let .success(value): _result.orderId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["content"] as AnyObject?) {
                
                case let .success(value): _result.content = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SubmissionResult", actual: "\(source)"))
            }
        }
        // Decoder for [TransactionHistoryItem]
        Decoders.addDecoder(clazz: [TransactionHistoryItem].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[TransactionHistoryItem]> in
            return Decoders.decode(clazz: [TransactionHistoryItem].self, source: source)
        }

        // Decoder for TransactionHistoryItem
        Decoders.addDecoder(clazz: TransactionHistoryItem.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<TransactionHistoryItem> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? TransactionHistoryItem() : instance as! TransactionHistoryItem
                switch Decoders.decodeOptional(clazz: TransactionHistoryItem.Status.self, source: sourceDictionary["status"] as AnyObject?) {
                
                case let .success(value): _result.status = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["order_id"] as AnyObject?) {
                
                case let .success(value): _result.orderId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: SubmissionResult.self, source: sourceDictionary["order"] as AnyObject?) {
                
                case let .success(value): _result.order = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "TransactionHistoryItem", actual: "\(source)"))
            }
        }
        // Decoder for [TransactionHistoryList]
        Decoders.addDecoder(clazz: [TransactionHistoryList].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[TransactionHistoryList]> in
            return Decoders.decode(clazz: [TransactionHistoryList].self, source: source)
        }

        // Decoder for TransactionHistoryList
        Decoders.addDecoder(clazz: TransactionHistoryList.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<TransactionHistoryList> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? TransactionHistoryList() : instance as! TransactionHistoryList
                switch Decoders.decodeOptional(clazz: [TransactionHistoryItem].self, source: sourceDictionary["transactions"] as AnyObject?) {
                
                case let .success(value): _result.transactions = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "TransactionHistoryList", actual: "\(source)"))
            }
        }
        // Decoder for [Submission]
        Decoders.addDecoder(clazz: [Submission].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[Submission]> in
            return Decoders.decode(clazz: [Submission].self, source: source)
        }

        // Decoder for Submission
        Decoders.addDecoder(clazz: Submission.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Submission> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? Submission() : instance as! Submission
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transaction_id"] as AnyObject?) {
                
                case let .success(value): _result.transactionId = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sender_address"] as AnyObject?) {
                
                case let .success(value): _result.senderAddress = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recipient_address"] as AnyObject?) {
                
                case let .success(value): _result.recipientAddress = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["completed_form"] as AnyObject?) {
                
                case let .success(value): _result.completedForm = value
                case let .failure(error): break
                
                }
                switch Decoders.decodeOptional(clazz: Submission.OfferType.self, source: sourceDictionary["offer_type"] as AnyObject?) {
                
                case let .success(value): _result.offerType = value
                case let .failure(error): break
                
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "Submission", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
